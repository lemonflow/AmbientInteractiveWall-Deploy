{
  "name": "flick",
  "version": "0.2.3",
  "description": "GitHub post-receive hooks handler",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/romac/node-flick"
  },
  "keywords": [
    "github",
    "git",
    "post-receive",
    "hook"
  ],
  "author": {
    "name": "Romain Ruetschi",
    "url": "romain.ruetschi@gmail.com"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "dependencies": {
    "netmask": "0.0.2"
  },
  "devDependencies": {
    "mocha": "*",
    "should": "*",
    "supertest": "0.0.1"
  },
  "scripts": {
    "prepublish": "npm prune",
    "test": "make test REPORTER=dot"
  },
  "readme": "[![Build Status](https://secure.travis-ci.org/romac/node-flick.png?branch=master)](https://travis-ci.org/romac/node-flick)\n[![Dependencies Status](https://david-dm.org/romac/node-flick.png)](https://david-dm.org/romac/node-flick)\n# node-flick\n\nnode-flick is a [GitHub post-receive hooks](https://help.github.com/articles/post-receive-hooks) handler for Node.js.\n\n## Installation\n\nInstall the latest version by running\n\n    $ npm install flick\n\n## Usage\n\nLet's say you want to run `git pull --rebase` on a repository clone every time commits are pushed to GitHub.\n\nFirst, import everything we need (this assumes that you installed node-flick via the above command).\n\n```js\nvar connect = require('connect'),\n    shell = require('shelljs'),\n    flick = require('flick'),\n    app = connect();\n```\n\nThen, define the action to run once we'll receive the notification from GitHub.\n\n```js\nfunction gitPull(root, options)\n{\n    return function(req, res, next) {\n        var cmd = 'git pull' + (options.rebase ? ' --rebase' : '');\n\n        shell.cd(root);\n        shell.exec(cmd, function(code, output) {\n            console.log(cmd + ' exited with code ' + code);\n        });\n\n        next();\n    };\n}\n```\n\nTell node-flick to run that action everytime we receive a notification for a specific repository.\n\n```js\nvar handler = flick();\n\nhandler.use('your-username/a-repository', gitPull('/path/to/working-copy', { rebase: true }));\n```\n\nLet's then configure connect.\n\n```js\n// Parse body of POST requests\napp.use(connect.bodyParser());\n\n// Hook flick with express\napp.use(flick.whitelist({ local: true }));\napp.use(flick.payload());\napp.use(handler);\n```\n\nLaunch the HTTP server.\n\n```js\n// Thank GitHub for their niceness\napp.use(function(req, res) {\n    res.writeHead(200);\n    res.end('Thank you, dear friend.\\n');\n});\n\napp.listen(4001);\nconsole.log('flick is listening on port 4001');\n```\n\nNow, run the app with\n\n    $ node update.js\n\nAnd configure the endpoint in your repository settings on GitHub, under the **WebHooks** section.\n\nFrom now on, everytime you will push something to GitHub, the handler above will be triggered and the repository clone on the server will get updated.\n\n## Documentation\n\nnode-flick works very much like express. In fact, its API is a lot like express' one:\n\n### flick()\n\nCreate a middleware for express.\n\n```js\nvar express = require('express'),\n    flick = require('flick'),\n    app = express(),\n    handler = flick();\n\nhandler.use(function(req, res, next) {\n    console.log('Got a WebHook!');\n    next();\n});\n\napp.use('/webhook', handler);\napp.listen(3000);\n```\n\n### flick.whitelist([options])\n\nCreate a middleware for express, that makes sure that the incoming request comes from GitHub.  \nIt takes an optional object argument with can hold the following properties:\n* `known` Check the request's remote IP against the known GitHub IPs. Defaults to `true`.\n* `ips` An array of allowed IPs, that will be merged with GitHub's known IPs if `known` is enabled. Defaults to `[]`.\n* `local` Allow requests from the local machine. It's basically a shortcut for `ips: ['127.0.0.1']`. Defaults to `false`.\n\n```js\nvar express = require('express'),\n    flick = require('flick'),\n    app = express(),\n    handler = flick();\n\nhandler.use(function(req, res, next) {\n    console.log('Got a WebHook!');\n    next();\n});\n\napp.use('/webhook', flick.whitelist({ known: true, ips: ['192.168.1.23'], local: true }));\napp.use('/webhook', handler);\napp.listen(3000);\n```\n\n### flick.payload([name])\n\nCreate a middleware for express, that checks if the payload sent by GitHub is there, parse it, and assign it to `req.flick.payload`.  \nYou don't have to use it, but it's quite handy to avoid doing that check and calling `JSON.parse` on `req.body.payload` manually.\n\nTakes an optional argument holding the name of the POST body field that holds the payload. Defaults to `payload`, which is what GitHub uses.\n\n```js\nvar express = require('express'),\n    flick = require('flick'),\n    app = express(),\n    handler = flick();\n\nhandler.use(function(req, res, next) {\n    var repository = req.flick.payload.repository;\n    console.log('Got WebHook for %s/%s', repository.owner.name, repository.name);\n    next();\n});\n\napp.use('/webhook', flick.whitelist({local: true}));\napp.use('/webhook', flick.payload());\napp.use('/webhook', handler);\napp.listen(3000);\n```\n\n### handler.use([repo], fn)\n\nUse the given handler `fn(req, res, next)` with optional `repo`, whose form is `username/repository`, defaulting to `*`.  \n\n`req` represents the current HTTP request. It's the same object that express would give us, only augmented with a `flick` property which is an object with for now only one property `payload`, holding the payload GitHub sent us.  \n\n`res` represents the current HTTP response. It's exactly the same object that express would give us.  \n\nCalling `next` will call the next flick handler, or give the control back to express if there aren't any.\n\nSay you want to log to the console whenever a WebHook is fired, for any repository this hook is configured for:\n```js\nhandler.use(function(req, res, next) {\n    var repository = req.flick.payload.repository;\n    console.log('Got WebHook for %s/%s', repository.owner.name, repository.name);\n    next();\n});\n```\n\nOr maybe you only want to do that for a specific repository:\n```js\nhandler.use('romac/node-houdini', function(req, res, next) {\n    console.log('Got WebHook for Houdini!');\n    next();\n});\n```\n\n## License\n\nnode-flick is released under the [MIT License](http://romac.mit-license.org).\n",
  "bugs": {
    "url": "https://github.com/romac/node-flick/issues"
  },
  "homepage": "https://github.com/romac/node-flick",
  "_id": "flick@0.2.3",
  "_from": "flick@"
}
